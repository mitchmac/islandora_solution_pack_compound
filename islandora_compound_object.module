<?php

/**
 * @file
 * Islandora Compound Object Solution Pack
 * Enables parent-child relationships between objects with navigation features.
 *
 * Hook implementations and general functions.
 */

define('ISLANDORA_COMPOUND_OBJECT_CMODEL', 'islandora:compoundCModel');

/**
 * Implements hook_menu().
 */
function islandora_compound_object_menu() {
  $items = array();
  $items['admin/islandora/compound_object'] = array(
    'title' => 'Compound objects',
    'access arguments' => array('administer compound relationships'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_compound_object_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/object/%islandora_object/manage/compound'] = array(
    'title' => 'Compound',
    'page callback' => 'islandora_compound_object_manage',
    'page arguments' => array(2),
    'access callback' => 'islandora_compound_object_access',
    'access arguments' => array(2),
    'file' => 'includes/manage.form.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['islandora_compound_object/autocomplete'] = array(
    'page callback' => 'islandora_compound_object_autocomplete_child',
    'page arguments' => array(2),
    'access arguments' => array('administer compound relationships'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_compound_object_permission() {
  return array(
    'administer compound relationships' => array(
      'title' => t('Administer compound object relationships'),
      'description' => t('Add a child to a parent.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_compound_object_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_compound_prev_next' => array(
      'file' => 'theme/theme.inc',
      'variables' => array(
        'parent_label' => NULL,
        'parent_url' => NULL,
        'previous_pid' => NULL,
        'next_pid' => NULL,
        'child_count' => NULL,
        'siblings' => NULL,
        'pid' => NULL,
      ),
    ),
    'islandora_compound_object_draggable_table' => array(
      'render element' => 'form',
      'file' => 'theme/theme.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function islandora_compound_object_block_info() {
  $blocks['compound_navigation'] = array(
    'info' => t('Islandora Compound Object Navigation'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'islandora/object/*',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function islandora_compound_object_block_view($delta = '') {
  switch ($delta) {
    case 'compound_navigation':
      $block['subject'] = NULL;
      $block['content'] = islandora_compound_object_navigation_block();
  }

  return $block;
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_compound_object_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_compound_object');

  $compound_content_model = $connection->repository->constructObject(ISLANDORA_COMPOUND_OBJECT_CMODEL);
  $compound_content_model->owner = 'fedoraAdmin';
  $compound_content_model->label = 'Islandora Compound Object Content Model';
  $compound_content_model->models = 'fedora-system:ContentModel-3.0';

  $datastream = $compound_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_compound_ds_composite_model.xml", FALSE);
  $compound_content_model->ingestDatastream($datastream);

  $compound_collection = $connection->repository->constructObject('islandora:compound_collection');
  $compound_collection->owner = 'fedoraAdmin';
  $compound_collection->label = 'Compound Collection';
  $compound_collection->models = 'islandora:collectionCModel';
  $compound_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  $datastream = $compound_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_compound_collection_policy.xml", FALSE);
  $compound_collection->ingestDatastream($datastream);

  $datastream = $compound_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $compound_collection->ingestDatastream($datastream);

  return array(
    'islandora_compound_object' => array(
      'title' => 'Islandora compound object',
      'objects' => array(
        $compound_content_model,
        $compound_collection,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_compound_object_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_compound_object');
  return array(
    'Compound Object MODS form' => array(
      'form_file' => "$module_path/xml/islandora_compound_form_mods.xml",
    ),
  );
}

/**
 * Implements hook_islandora_content_model_forms_form_associations().
 */
function islandora_compound_object_islandora_content_model_forms_form_associations() {
  return array(
    'islandora_compound_mods_form' => array(
      'content_model' => ISLANDORA_COMPOUND_OBJECT_CMODEL,
      'form_name' => 'Compound Object MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Render navigation block.
 */
function islandora_compound_object_navigation_block() {
  module_load_include('inc', 'islandora', 'includes/utilities');
  drupal_add_css(drupal_get_path('module', 'islandora_compound_object') . '/css/islandora_compound_object.block.css');
  if (arg(1) == 'object' && islandora_is_valid_pid(arg(2))) {

    // If only compound cmodel objects can be compound, this isn't necessary.
    $children = islandora_compound_object_get_parts(arg(2));
    $pid = (!empty($children)) ? $children[0] : arg(2);
    $object = islandora_object_load($pid);

    $output = '';
    if ($object) {
      $rels_predicate = variable_get('islandora_compound_object_relationship', 'isPartOf');
      $part_of = $object->relationships->get('info:fedora/fedora-system:def/relations-external#', $rels_predicate);

      // This object is part of a compound object.
      if (!empty($part_of)) {
        // Go through all parents.
        foreach ($part_of as $part) {
          $parent_pid = $part['object']['value'];
          $parent = islandora_object_load($parent_pid);

          $siblings = islandora_compound_object_get_parts($parent_pid);
          $current_key = array_search($object->id, $siblings);

          $previous_pid = (isset($siblings[$current_key - 1])) ? $siblings[$current_key - 1] : '';
          $next_pid = (isset($siblings[$current_key + 1])) ? $siblings[$current_key + 1] : '';

          // Check if perms to show link for parent manage.
          if (islandora_object_manage_access_callback(array(
            ISLANDORA_METADATA_EDIT, ISLANDORA_MANAGE_PROPERTIES, ISLANDORA_ADD_DS), $parent)) {
            $parent_url = 'islandora/object/' . $parent_pid . '/manage';
          }
          else {
            $parent_url = FALSE;
          }

          $prev_next = theme('islandora_compound_prev_next',
            array(
              'parent_label' => $parent->label,
              'parent_url' => $parent_url,
              'previous_pid' => $previous_pid,
              'next_pid' => $next_pid,
              'child_count' => count($siblings),
              'siblings' => $siblings,
              'pid' => $pid,
            ));

          $output .= $prev_next;
        }
      }

      if (!empty($output)) {
        return array('#markup' => $output);
      }
    }
  }
}

/**
 * Implements hook_islandora_cmodel_islandora_view_object().
 */
function islandora_compound_object_islandora_compoundCModel_islandora_view_object($object) {
  // Get view of first child.
  $children = islandora_compound_object_get_parts($object->id);
  if (!empty($children)) {
    $first_child_id = reset($children);
    if ($first_child_id != $object->id) {
      $first_child = islandora_object_load($first_child_id);
      return islandora_view_object($first_child);
    }
  }
}

/**
 * Access callback for compound object management.
 */
function islandora_compound_object_access(AbstractObject $object) {
  return islandora_object_access('administer compound relationships', $object);
}

/**
 * Replaces parent object thumbnail with child's thumbnail.
 */
function islandora_compound_object_update_parent_thumbnail($child, $parent) {
  $parts = islandora_compound_object_get_parts($parent->id);

  // Child has just been added maybe? Can this be relied upon?
  if (count($parts) == 1) {
    $mime_detector = new MimeDetect();
    $ext = $mime_detector->getExtension($child['TN']->mimeType);
    $file = drupal_realpath('temporary://{$child->id}_TN.{$ext}');
    $child['TN']->getContent($file);

    if (empty($parent['TN'])) {
      $ds = $parent->constructDatastream('TN', 'M');
      $parent->ingestDatastream($ds);
    }
    else {
      $ds = $parent['TN'];
    }
    $ds->setContentFromFile($file, TRUE);
    $ds->label = 'Thumbnail';
    $ds->mimetype = $mime_detector->getMimetype($file);

    file_unmanaged_delete($file);
  }
}

/**
 * Autocomplete callback for object search.
 */
function islandora_compound_object_autocomplete_child($string) {
  $matches = array();
  $islandora_tuque = new IslandoraTuque();
  $results = $islandora_tuque->api->a->findObjects('terms', '*' . $string . '*', 10);

  foreach ($results['results'] as $result) {
    // Empty array elements getting sent through.
    if (is_array($result['title'])) {
      $title = $result['title'][0];
    }
    else {
      $title = $result['title'];
    }
    $matches[$result['pid']] = $title . ' (' . $result['pid'] . ')';
  }
  drupal_json_output($matches);
}

/**
 * Return an array of pids that are part of a compound object.
 */
function islandora_compound_object_get_parts($pid, $ret_title = FALSE) {
  $rels_predicate = variable_get('islandora_compound_object_relationship', 'isPartOf');
  $objects = array();

  $connection = islandora_get_tuque_connection();
  $escaped_pid = str_replace(':', '_', $pid);
  if ($connection) {
    $query = <<<EOQ
PREFIX islandora-rels-ext: <http://islandora.ca/ontology/relsext#>
SELECT ?object ?title ?seq
FROM <#ri>
WHERE {
  ?object <fedora-model:label> ?title ;
          <fedora-rels-ext:$rels_predicate> <info:fedora/$pid> .
  OPTIONAL {
    ?object islandora-rels-ext:isSequenceNumberOf$escaped_pid ?seq
  }
}
EOQ;
    $results = $connection->repository->ri->sparqlQuery($query);

    // Sort the objects into their proper order.
    $sort = function($a, $b) {
      $a = $a['seq']['value'];
      $b = $b['seq']['value'];
      if ($a === $b) {
        return 0;
      }
      if (empty($a)) {
        return 1;
      }
      if (empty($b)) {
        return -1;
      }
      return $a - $b;
    };
    uasort($results, $sort);

    foreach ($results as $result) {
      $object = islandora_object_load($result['object']['value']);
      if (islandora_object_access(ISLANDORA_VIEW_OBJECTS, $object)) {
        if ($ret_title) {
          $objects[$result['object']['value']] = array(
            'pid' => $result['object']['value'],
            'title' => $result['title']['value'],
            'seq' => $result['seq']['value'],
          );
        }
        else {
          $objects[] = $result['object']['value'];
        }
      }
    }
  }

  return $objects;
}
